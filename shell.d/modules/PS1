#!/bin/bash
# shellcheck disable=SC1090,SC2034
#
# ShellCheck ignore list:
#  - SC1090: ${3,Can't follow non-constant source. Use a directive to specify location.}
#  - SC2034: foo appears unused. Verify it or export it.

# ANSI escape code https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
# CSI (Control Sequence Introducer) sequences
#   begin \e[ or \033[ or \0x1b[
# SGR (Select Graphic Rendition) parameter
#   CSI n m
# SGR n
#   30–37	Set foreground color
#   40–47	Set background color
#   etc.
#   can use semicoron
#   e.g. \e[30;40m

# CHR_8bit \e[38;5;<>m
# BG_8bit \e[48;5;<>m
# n =
#     0-  7:  standard colors (as in ESC [ 30–37 m)
#     8- 15:  high intensity colors (as in ESC [ 90–97 m)
#    16-231:  6 × 6 × 6 cube (216 colors): 16 + 36 × r + 6 × g + b (0 ≤ r, g, b ≤ 5)
#   232-255:  grayscale from dark to light in 24 steps

CHR_B_BG_W='\e[30;47m'
CHR_W_BG_B='\e[37;44m'
BG_B='\e[44m'
BG_W='\e[47m'
BG_RESET='\e[49m'
CHR_BK='\e[30m'
CHR_R='\e[31m'
CHR_G='\e[32m'
CHR_Y='\e[33m'
CHR_B='\e[34m'
CHR_M='\e[35m'
CHR_C='\e[36m'
CHR_W='\e[37m'
CLR_RESET='\e[39;49m'
SYTLE_RESET='\e[0m'
SYTLE_BOLD='\e[1m'
SYTLE_FAINT='\e[2m'
SYTLE_ITAL='\e[3m'
SYTLE_UNDERLINE='\e[4m'
SYTLE_BLINK='\e[5m'
SYTLE_HF_BLINK='\e[6m'
SYTLE_REVERSE='\e[7m'
SYTLE_HIDE='\e[8m'
SYTLE_STRIKE='\e[9m'
_PROMPT_SYMBOL='$'
_DOCKER_SYMBOL='🐳 '
_AWS_SYMBOL='☁ '

__prompt_suffix() {
  local prev_status=$?
  local clr docker_p aws_p
  aws_p=''; type aws >/dev/null 2>&1 && aws_p="${_AWS_SYMBOL:-az:}${CHR_Y}${_AWS_CURRENT_REGION}"
  docker_p=''; type docker >/dev/null 2>&1 && docker_p="${_DOCKER_SYMBOL:-container:}$(docker ps | tail +2 | wc -l)"
  clr=${CHR_G};test $prev_status -ne 0 && clr=${CHR_R}
  PS1="${PS1_BASE}${clr}status:${prev_status} ${CHR_M}shlvl:${SHLVL} jobs:$(jobs -l | wc -l) ${CHR_C}${docker_p} ${CHR_W}${aws_p}${CLR_RESET} \n${_PROMPT_SYMBOL:-\$} "
  return $prev_status
}

if [ "$1" = 'wsl' ]; then
  if  __git_ps1 >/dev/null 2>&1; then
    PS1_BASE="$CHR_B_BG_W \t $CHR_W_BG_B \W $CHR_B_BG_W\$(__git_ps1 '(%s)')$CLR_RESET <\$(git config user.name)> $SYTLE_NONE"
    PS1="${PS1_BASE} \n\$ "
  else
    # shellcheck disable=2154
    PS1_BASE='${debian_chroot:+($debian_chroot)}\u@\h:\w '
    PS1="${PS1_BASE}\n\$ "
  fi
  export PROMPT_COMMAND="__prompt_suffix;${PROMPT_COMMAND//__prompt_suffix;/}"
  return
fi

if [ "$1" = 'debian' ]; then
  PS1_BASE='\t ${debian_chroot:+($debian_chroot)}\e[01;32m\u@\h\e[00m:\e[01;34m\w\e[00m'
  if __git_ps1 >/dev/null 2>&1; then
    PS1_BASE+=' $(__git_ps1 "\e[30;47m(%s)")\e[39;49m <$(git config user.name)>'
  fi
  PS1_BASE+=' '
  PS1="${PS1_BASE}\n\$ "
  export PROMPT_COMMAND="__prompt_suffix;${PROMPT_COMMAND//__prompt_suffix;/}"
  return
fi

if [ "$(getent passwd vagrant)" != "" ] && [ -f /etc/bash_completion.d/git-prompt.sh ]; then
  HOST_NAME="\H"
  END="\[\e[m\]"
  GIT_CLR="\[\e[37;45m\]"
  # shellcheck disable=3028
  if [ ${EUID:-${UID}} = 0 ]; then
    BEGIN="\[\e[1;37;41m\]"
    BEGIN_TRIANGLE="\[\e[0;32;41m\]"
    MIDDLE="\[\e[0;30;43m\]"
    MIDDLE_TRIANGLE="\[\e[0;33m\]"
  else
    BEGIN="\[\e[1;37;45m\]"
    BEGIN_TRIANGLE="\[\e[0;32;45m\]"
    MIDDLE="\[\e[0;30;47m\]"
    MIDDLE_TRIANGLE="\[\e[0;37m\]"
  fi

  PS1="${BEGIN}\u@${HOST_NAME}${BEGIN_TRIANGLE} ${MIDDLE} \W ${MIDDLE_TRIANGLE}${GIT_CLR}\$(__git_ps1 '(%s)')${END} \! \\$ "
fi

