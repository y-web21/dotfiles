#!/usr/bin/env bash
# keybind functions

# shellcheck disable=1090
test -r ~/dotfiles/bin/b-l && . ~/dotfiles/bin/b-l

__get_buffer() {
  if [ -n "$ZSH_VERSION" ]; then
    echo "${BUFFER}"
  fi
  echo "${READLINE_LINE}"
}

__set_buffer() {
  if [ -n "$ZSH_VERSION" ]; then
    BUFFER="${BUFFER}${1}"
    # shellcheck disable=2034
    CURSOR=${#BUFFER}
  fi
  READLINE_LINE="${READLINE_LINE}${1}"
  READLINE_POINT=${#READLINE_LINE}
}

# overwrite ~/.fzf.bash __fzf_history__
# --------------------
__fzf_history__() {
  local ret key picks HISTFILE_tmp filename line
  HISTFILE_tmp="${HISTFILE}tmp"
  local data_dir="${XDG_DATA_HOME:-$HOME}"
  # add current session history to ~/.bash_history
  history -a

  inner() {
    (
      HISTTIMEFORMAT=''
      tac "${HISTFILE}" | grep -nav '^#' | sed -E 's/^([0-9]{1,}:)/\1\t/' |
        fzf-tmux -w 60% -h 60% --height 80% \
          --layout=reverse \
          --no-sort \
          --multi \
          --query "$READLINE_LINE" \
          --bind=ctrl-r:toggle-sort \
          --bind=ctrl-d:half-page-down \
          --bind=ctrl-u:half-page-up \
          --bind=alt-a:toggle-all \
          --expect=esc,ctrl-c \
          --expect=alt-c,alt-y,ctrl-y \
          --expect=alt-l,alt-m \
          --expect=alt-d,alt-D \
          --bind='ctrl-l:unix-line-discard' \
          --header-first \
          --header="$(printf '%-15s\t%-25s\t%-20s\t%-20s\n%-15s\t%-25s\t%-20s\t%-20s\n%-15s' \
            'Enter: Print' 'Tab,ctrl-i: Multi select' 'alt-a: Toggle selected' 'alt-D: Delete dupes' \
            'alt-c,y: copy' 'alt-d: Delete' 'alt-l: dump to file' 'alt-m: keep with a comment' \
            'ctrl-l: unix-line-discard' )"
    )
  }

  while true; do
    ret=$(inner)
    key=$(printf '%s' "$ret" | tail +1 | head -1)
    picks="echo \"\$ret\" | tail +2 | cut -d ':' -f 2- | cut -f 2-"

    case "${key}" in
    esc | ctrl-c) ;;
    alt-c | alt-y | ctrl-y)
      while read -r i; do
        echo "$i"
        echo "$i" >> "$HISTFILE_tmp"
      done < <(eval "${picks}")
      # shellcheck disable=2002
      cat "$HISTFILE_tmp" | clip
      ;;
    alt-l)
      while read -r i; do
        echo "$i" >> "$HISTFILE_tmp"
      done < <(eval "${picks}")
      read -re -p 'output filepath: ' -i "$HOME/history_log" filename
      test -n "$filename" && cp "$HISTFILE_tmp" "$filename"
      ;;
    alt-m)
      line="$(eval "${picks}" | head -1)"
      echo "$line"
      read -re -p 'one line comment: '
      printf '%s\n%s\n\n' "# Description: $REPLY" "$line" >> "$data_dir/aif/temp.sh" \
        && echo "keep to $data_dir/aif/temp.sh"
      continue
      ;;
    alt-d)
      # ret(del_line)„ÅØÈÅ∏ÊäûÈ†Ü„Å™„ÅÆ„ÅßÈôçÈ†Ü„Å´‰∏¶„Å≥Áõ¥„Åó„Å¶„Åã„ÇâÂΩìË©≤Ë°å„ÇíÂâäÈô§„Åô„Çã
      line=()
      while read -r i; do
        line+=("$(echo "$i" | cut -d ':' -f 1)")
      done < <(echo "$ret" | tail +2 | tac)

      tac "${HISTFILE}" >"${HISTFILE_tmp}"
      while read -r i; do
        sed -i -e "${i}d" "${HISTFILE_tmp}"
      done < <(for i in "${line[@]}"; do echo "$i"; done | sort -rn)
      tac "${HISTFILE_tmp}" >"${HISTFILE}"
      continue
      ;;
    alt-D)
      echo remove dupes.
      "${HOME}/bin/remove_dupes_from_timestamped_bash_history.bash"
      continue
      ;;
    *)
      # put text in the bash command line buffer
      READLINE_LINE="$(eval "${picks}" | head -1)"
      ;;
    esac
    break
  done

  test -e "${HISTFILE_tmp}" && rm "${HISTFILE_tmp}"
  READLINE_POINT=${#READLINE_LINE}
}

__pick_env() {
  READLINE_LINE="$READLINE_LINE$(cat <(set -o posix;set) <(echo '') | fzf \
    --header="$(printf '%s\t%s\t%s' 'Enter: print value' 'alt-j: print name' 'alt-k: set new')" \
    --bind='alt-j:execute(echo \${} | cut -d '=' -f 1)+abort' \
    --bind='alt-k:execute(printf '%s%s' $(echo {} | cut -d '=' -f 1) '=')+abort' \
    --bind='enter:execute(echo {} | cut -d '=' -f 2-)+abort')"
  READLINE_POINT=${#READLINE_LINE}
}

__pick_path() {
  local RET
  RET=$(find . | fzf)
  # RET=$(find . -mindepth 1 -maxdepth 5 -perm /u=x,g=x,o=x -type f | fzf)
  if [ '' = "$RET" ]; then return; fi
  # put text in the bash command line buffer
  __set_buffer " $RET"
}

__pick_docker_container() {
  local RET
  RET=$(docker ps -a | tail +2 | fzf --reverse | awk '{print $1}')
  if [ '' = "$RET" ]; then return; fi
  RET=$(docker ps -a | grep -a "$RET" | sed -e 's/  \+/\n/g' | fzf --reverse)
  __set_buffer " $RET"
}

__interactive_cd() {
  local DIR cmd filter
  while true; do
    filter="grep -vE '\.(git|npm)' | grep -v 'node_modules'"
    cmd='find -L "${1:-.}" -mindepth 0 -maxdepth ${lvl:-1} -type d | sed "1a .." | grep -av ^\.$'
    DIR=$(eval "$cmd" |
      fzf-tmux -p 65% --height 70% \
        --preview 'ls -AF --color {} | column ;echo -e '' ; tree -C -d -L 2 {}' --border \
        --preview-window=65% \
        --bind="alt-h:reload(lvl=1; eval $cmd)" \
        --bind="alt-j:reload(lvl=2; eval $cmd)" \
        --bind="alt-k:reload(lvl=3; eval $cmd)" \
        --bind="alt-l:reload(lvl=4; eval $cmd)" \
        --bind="alt-H:reload(lvl=1; eval $cmd | $filter)" \
        --bind="alt-J:reload(lvl=2; eval $cmd | $filter)" \
        --bind="alt-K:reload(lvl=3; eval $cmd | $filter)" \
        --bind="alt-L:reload(lvl=4; eval $cmd | $filter)" \
        --bind="ctrl-l:jump-accept" \
        --header="$(printf '%s\n%s\t%s\n%s' "$(pwd)" 'alt-hjkl: depth 1-4' 'alt-HJKL: filter' \
          'ctrl-l: jump-accept(EasyMotion-like)')" \
      )
    if [ '' = "$DIR" ]; then return; fi
    cd "$DIR" || return
  done
}

__open_with_editor() {
  local prev_dir depth fzf_ret file_path input line
  # array base 1 to 0
  [ -n "$ZSH_VERSION" ] && setopt localoptions ksharrays

  prev_dir=$(pwd)
  depth=$(seq 6 | fzf --query 1 --reverse --height=60%)

  while true; do

    unset file_path
    unset fzf_ret

    fzf_ret="$(find -L . -maxdepth "$depth" 2>/dev/null | sed 's/^\.$/../' |
      xargs -n1 bash -c 'echo $0 $( [ -d $0 ] && echo "üì¶directoryüôÑ" )' |
      fzf-tmux -p 90% \
        --header="$(pwd)" \
        --expect=ctrl-c \
        --expect=esc \
        --bind="ctrl-e:execute(pwd)" \
        --preview-window=65%,+3/3,~3 \
        --preview 'if [ -d {1} ]; \
            then echo -e '\''\n'\'' && du -hs {1} && exa -al --time-style=long-iso {1} ; \
            else bat -n --color=always --style=header,grid,numbers {} 2>/dev/null; fi')"

    input=$(echo -e "$fzf_ret" | cut -d $'\n' -f 1)
    line=$(echo -e "$fzf_ret" | cut -d $'\n' -f 2)

    [ "$input" = 'ctrl-c' ] && break
    [ "$input" = 'esc' ] && break

    file_path=$(pwd)/$(echo "${line}" | awk '{print $1}' | sed 's/.\///')

    [ '' = "${file_path}" ] && break
    [ -f "${file_path}" ] && break
    [ -d "${file_path}" ] && cd "${file_path}" || exit
  done

  [ -n "$file_path" ] && "${EDITOR:-vim}" "$file_path"
  # shellcheck disable=2164
  cd "$prev_dir"
}

__rg() {
  rg -Hn -u --color=always "$(__get_buffer)" | less -R
}

__rg_uu() {
  rg -Hn -uu --color=always "$(__get_buffer)" | less -R
}

__rg_edit_uu() {
  __rg_edit "-uu -n -e"
}

__rg_edit() {
  local file editor i rgopt
  rgopt=${1:-"-u -n -e"}
  editor=$EDITOR
  i=0
  # shellcheck disable=1083,2086
  while read -r ret; do
    if [ $i -eq 0 ]; then
      [ "$ret" = 'alt-l' ] && editor=less
      [ "$ret" = 'alt-v' ] && editor=vim
      [ "$ret" = 'alt-b' ] && editor=bat
    else
      file=$ret
    fi
    ((i++))
  done < <(
    rg --color=never $rgopt "$(__get_buffer)" |
      fzf \
        --query "$(__get_buffer)" \
        --delimiter=':' \
        --reverse \
        --expect=alt-l \
        --expect=alt-v \
        --expect=alt-b \
        --border=top \
        --bind alt-p:preview-up,alt-n:preview-down \
        --preview-window=right:65%,+{2}+3/3,~3 \
        --preview 'bat --color=always {1} --highlight-line {2} --wrap character' |
      cut -d ':' -f 1
  )
  # --height=80% \

  [ -n "$file" ] && $editor "$file"
}

__rg_file_uu() {
  __rg_file "-uu -e"
}

__rg_file() {
  local rgopt
  rgopt=${1:-"-u -e"}
  # shellcheck disable=2086
  rg --files | rg --color=always $rgopt "$(__get_buffer)" | bat --style plain
}

__cd_z() {
  local fol jumper
  jumper=z
  type zoxide >/dev/null 2>&1 && jumper='zoxide query --score --list'
  fol=$(eval "$jumper" | fzf-tmux -p -w70% -h90% -x10 --height 40% --reverse --preview='ls -lCF {2} --color' --preview-window='top:30%' | awk '{print $NF}')
  if [ '' = "$fol" ]; then return; fi
  cd "$fol" || return
  pwd
}

__z() {
  local fol jumper
  jumper=z
  type zoxide >/dev/null 2>&1 && jumper='zoxide query --score --list'
  fol=$(eval "$jumper" | fzf-tmux -p -w70% -h90% -x10 --height 40% --reverse --preview='ls -lCF {2} --color' --preview-window='top:30%' | awk '{print $NF}')
  if [ '' = "$fol" ]; then return; fi
  __set_buffer "$fol"
}

__ls_al_readline() {
  local buf
  buf="$(__get_buffer)"
  if type exa &>/dev/null; then
    exa -lah --git --time-style=long-iso "${buf:-.}"
  else
    ls -la --time-style=long-iso "${buf:-.}"
  fi
  echo ''
}

__jump_to_readline() {
  cd "$(__get_buffer)" || return
  READLINE_LINE=''
  pwd
}

__relogin() {
  stty echo
  stty sane
  exec $SHELL -l
}

__reset_screen() {
  stty echo
  stty sane
  exec $SHELL -l
}

__test_bind() { echo valid; }

# Source: https://github.com/junegunn/fzf/wiki/Examples#readline
# --------------------
__fzf_readline() {
  builtin eval "
    builtin bind ' \
      \"\C-x3\": $(
        builtin bind -l | command fzf +s +m --toggle-sort=ctrl-r
      ) \
    '
  "
}

if [ -n "$BASH_VERSION" ]; then
  builtin bind -x '"\C-x2": __fzf_readline';
  builtin bind '"\C-x1": "\C-x2\C-x3"'
fi

# =============== keybind =================
# = Readline commands are assigned with /etc/inputrc or ~/.inputrc
# = list of readline commands -> bind -l
# = list of keybind           -> bind -p
# = list of keybind(bind -x)  -> bind -X
# = remove bind               -> bind -r "\C-y"
# = reset all                 -> `set -o emacs` or `set -o vi`
# = check current settings    -> stty -a
# = terminal line setting off -> stty stop undef

# zsh include guard
if [ -n "$BASH_VERSION" ]; then
  # user defined function (bind -X)
  bind -x '"\e\C-l": __relogin'
  bind -x '"\ed": __interactive_cd'
  bind -x '"\ee": __open_with_editor'
  bind -r "\ep"
  bind -x '"\ep\ee": __pick_env'
  bind -x '"\ep\ep": __pick_path'
  bind -x '"\ep\ed": __pick_docker_container'
  # bind -x '"\eg\eg": __rg_uu'
  # bind -x '"\eG\eG": __rg'
  # bind -x '"\eg\ee": __rg_edit_uu'
  bind -x '"\eG\eE": __rg_edit'
  # bind -x '"\eg\ef": __rg_file_uu'
  # bind -x '"\eG\eF": __rg_file'
  bind -x '"\ejj": __z'
  bind -x '"\ej\ej": __cd_z'
  bind -x '"\e;": __ls_al_readline'
  bind -x '"\e??": f-man'
  bind -x '"\e\C-rr": __reset_screen'
  # git prefix alt+g
  bind -x '"\eg\es": g-s'
  bind -x '"\eg\eb": g-b'
  bind -x '"\eg\el": g-l'
  bind '"\eg\eg": "\C-a\C-kgh fgist\n"'
  bind '"\eg\ei": "\C-a\C-kgh fis\n"'
  bind '"\eg\ep": "\C-a\C-kgh fpr\n"'
  # Readline function
  bind '"\ew": kill-word'
  # key macro (bind -S)
  bind '"\ea": "\C-e | awk '\''{print $()}'\'' \C-b\C-b\C-b\C-b"'
  bind '"\e?": "\C-a\C-k(LC_ALL=C; cat <(bind -X | sed -e '\''s\/ \/\\t\/; s\/^\"\/\/; s\/\":\/\/'\'' | sort -k 2 ) <(bind -S | sed '\''s\/ \/\\t\/1'\'' ) | column -t -s \"$(printf '\''\\t'\'')\") | less\n"'
fi
