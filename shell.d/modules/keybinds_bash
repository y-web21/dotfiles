#!/usr/bin/env bash
# keybind functions

__get_buffer(){
  if [ -n "$ZSH_VERSION" ]; then
    echo "${BUFFER}"
  fi
  echo "${READLINE_LINE}"
}

__set_buffer(){
  if [ -n "$ZSH_VERSION" ]; then
    BUFFER="${BUFFER}${1}"
    # shellcheck disable=2034
    CURSOR=${#BUFFER}
  fi
  READLINE_LINE="${READLINE_LINE}${1}"
  READLINE_POINT=${#READLINE_LINE}
}

__history_with_fzf() {
  local ret
  # add current session history to ~/.bash_history
  history -a
  ret=$(
    HISTTIMEFORMAT=''
    tac ~/.bash_history | grep -av '^#' | uniq | fzf-tmux -p 90% --height 80% --layout=reverse-list --query "$READLINE_LINE"
  )
  if [ '' = "$ret" ]; then return; fi
  # put text in the bash command line buffer
  READLINE_LINE="$ret"
  READLINE_POINT=${#ret}
}

__pick_env() {
  READLINE_LINE="$READLINE_LINE$(cat <(set -o posix;set) <(echo '')  | fzf | cut -d '=' -f 2-)"
  READLINE_POINT=${#READLINE_LINE}
}

__pick_path() {
  local RET
  RET=$(find . | fzf)
  # RET=$(find . -mindepth 1 -maxdepth 5 -perm /u=x,g=x,o=x -type f | fzf)
  if [ '' = "$RET" ]; then return; fi
  # put text in the bash command line buffer
  __set_buffer " $RET"
}

__pick_docker_container() {
  local RET
  RET=$(docker ps -a | tail +2 | fzf --reverse | awk '{print $1}')
  if [ '' = "$RET" ]; then return; fi
  RET=$(docker ps -a | grep -a "$RET" | sed -e 's/  \+/\n/g' | fzf --reverse)
  __set_buffer " $RET"
}

__interactive_cd() {
  local DIR
  while true; do
    DIR=$(find -L "${1:-.}" -mindepth 0 -maxdepth 1 -type d | sed '1a ..' | grep -av ^\.$ | fzf --preview 'ls {}' --border)
    if [ '' = "$DIR" ]; then return; fi
    cd "$DIR" || return
  done
}

__interacrive_cd_b() {
  local DIR
  DIR=$(find . -mindepth 1 -type d | peco --layout=bottom-up)
  if [ '' = "$DIR" ]; then return; fi
  cd "$DIR" || return
}

__open_with_editor() {
  local prev_dir depth fzf_ret file_path input
  # array base 1 to 0
  [ -n "$ZSH_VERSION" ] && setopt localoptions ksharrays

  prev_dir=$(pwd)
  depth=$(seq 6 | fzf --query 1 --reverse --height=60%)

  while true; do

    unset file_path
    unset fzf_ret

    find -L . -mindepth 1 -maxdepth "$depth" 2>/dev/null | sed '1i ..' | xargs -n1 bash -c 'echo $0 $( [ -d $0 ] && echo "ðŸ“¦directoryðŸ™„" )' |
      fzf \
        --expect=alt-o \
        --expect=ctrl-c \
        --expect=esc \
        --bind="ctrl-e:execute(pwd)" \
        --preview-window=65%,+3/3,~3 \
        --preview 'if [ -d {1} ]; \
              then echo -e '\''\n'\'' && du -hs {1} && exa -al --time-style=long-iso {1} ; \
              else bat -n --color=always --style=header,grid,numbers {} 2>/dev/null; fi' |
      awk '{print $1}' |
      while read -r ret; do
        fzf_ret+=("$ret")
      done

    # var check
    # i=0 && for f in "${fzf_ret[@]}"; do echo $i "$f" ;((i++)); done

    input="${fzf_ret[0]}"
    [ "$input" = 'ctrl-c' ] && break
    [ "$input" = 'esc' ] && break

    file_path=$(pwd)/$(echo "${fzf_ret[1]}" | sed 's/.\///')

    if [ "$input" = 'alt-o' ]; then
      file=$(read -r -p 'filename: ')
      echo $file
      echo newfile WIP
    fi

    [ '' = "${file_path}" ] && break
    [ -f "${file_path}" ] && break
    [ -d "${file_path}" ] && cd "${file_path}" || exit
  done

  [ -n "$file_path" ] && "${EDITOR:-vim}" "$file_path"
  # shellcheck disable=2164
  cd "$prev_dir"
}

__rg() {
  rg -Hn -u --color=always "$(__get_buffer)" | less -R
}

__rg_uu() {
  rg -Hn -uu --color=always "$(__get_buffer)" | less -R
}

__rg_edit_uu() {
  __rg_edit "-uu -n -e"
}

__rg_edit() {
  local file editor i rgopt
  rgopt=${1:-"-u -n -e"}
  editor=$EDITOR
  i=0
  # shellcheck disable=1083,2086
  while read -r ret; do
    if [ $i -eq 0 ]; then
      [ "$ret" = 'alt-l' ] && editor=less
      [ "$ret" = 'alt-v' ] && editor=vim
      [ "$ret" = 'alt-b' ] && editor=bat
    else
      file=$ret
    fi
    ((i++))
  done < <(
    rg --color=never $rgopt "$(__get_buffer)"  |
      fzf \
        --query "$(__get_buffer)"  \
        --delimiter=':' \
        --reverse \
        --expect=alt-l \
        --expect=alt-v \
        --expect=alt-b \
        --border=top \
        --bind alt-p:preview-up,alt-n:preview-down \
        --preview-window=right:65%,+{2}+3/3,~3 \
        --preview 'bat --color=always {1} --highlight-line {2} --wrap character' |
      cut -d ':' -f 1
  )
  # --height=80% \

  [ -n "$file" ] && $editor "$file"
}

__rg_file_uu() {
  __rg_file "-uu -e"
}

__rg_file() {
  local rgopt
  rgopt=${1:-"-u -e"}
  # shellcheck disable=2086
  rg --files | rg --color=always $rgopt "$(__get_buffer)"  | bat --style plain
}

__cd_z() {
  local fol jumper
  jumper=z
  type zoxide >/dev/null 2>&1 && jumper='zoxide query --score --list'
  fol=$(eval "$jumper" | fzf-tmux -p -w70% -h90% -x10 --height 40% --reverse --preview='ls -lCF {2} --color' --preview-window='top:30%'  | awk '{print $NF}')
  if [ '' = "$fol" ]; then return; fi
  cd "$fol" || return
  pwd
}

__z() {
  local fol jumper
  jumper=z
  type zoxide >/dev/null 2>&1 && jumper='zoxide query --score --list'
  fol=$(eval "$jumper" | fzf-tmux -p -w70% -h90% -x10 --height 40% --reverse --preview='ls -lCF {2} --color' --preview-window='top:30%'  | awk '{print $NF}')
  if [ '' = "$fol" ]; then return; fi
  __set_buffer "$fol"
}

__ls_al_readline() {
  local buf
  buf="$(__get_buffer)"
  if type exa &>/dev/null; then
    exa -lah --git --time-style=long-iso "${buf:-.}"
  else
    ls -la --time-style=long-iso "${buf:-.}"
  fi
  echo ''
}

__jump_to_readline() {
  cd "$(__get_buffer)" || return
  READLINE_LINE=''
  pwd
}

__relogin() {
  stty echo
  stty sane
  exec $SHELL -l
}

__reset_screen() {
  stty echo
  stty sane
  exec $SHELL -l
}

__test_bind() { echo valid; }

# =============== keybind =================
# = Readline commands are assigned with /etc/inputrc or ~/.inputrc
# = list of readline commands -> bind -l
# = list of keybind           -> bind -p
# = list of keybind(bind -x)  -> bind -X
# = remove bind               -> bind -r "\C-y"
# = reset all                 -> `set -o emacs` or `set -o vi`
# = check current settings    -> stty -a
# = terminal line setting off -> stty stop undef

# zsh include guard
if [ -n "$BASH_VERSION" ]; then
  # user defined function
  bind -x '"\e\C-l": __relogin'
  bind -x '"\eh": __history_with_fzf'
  bind -x '"\ed": __interactive_cd'
  bind -x '"\e\ed": __interacrive_cd_b'
  bind -x '"\ee": __open_with_editor'
  bind -r "\ep"
  bind -x '"\ep\ee": __pick_env'
  bind -x '"\ep\ep": __pick_path'
  bind -x '"\ep\ed": __pick_docker_container'
  bind -x '"\eg\eg": __rg_uu'
  bind -x '"\eG\eG": __rg'
  bind -x '"\eg\ee": __rg_edit_uu'
  bind -x '"\eG\eE": __rg_edit'
  bind -x '"\eg\ef": __rg_file_uu'
  bind -x '"\eG\eF": __rg_file'
  bind -x '"\ejj": __z'
  bind -x '"\ej\ej": __cd_z'
  bind -x '"\e;": __ls_al_readline'
  bind '"\e?": "bind -X | column -t | sort -k 2 | less\n"'
  bind -x '"\e\C-rr": __reset_screen'
fi
