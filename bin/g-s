#!/usr/bin/env bash

# path containing spaces is not supported

describe() {
  cat <<-EOS
		Staging Support Script
		alt-a: add <files>
		alt-h: add -p <files> # hunk
		alt-c: commit staged files
		alt-C: commit amend # no-edit
		alt-d: diff <files>
		alt-D: diff --cached
		alt-o: GIT_EDITOR <files> #fallback vim
		alt-r: show staged files and reset files
		alt-s: show current status
		ctrl-s: stash <files>
		enter: PAGER <files> #fallback bat,cat
	EOS
}

# global stash_files

_post_stash() {
  if [ -n "$stash_files" ]; then
    # shellcheck disable=2086
    git stash -u -m "stash_$(date --iso-8601='seconds')" -- ${stash_files}
  fi
}

# trap 'after_stash' {1,2,3,15}
trap '_post_stash' EXIT

_exists_in_stashlist() {
  local file
  for file in $stash_files; do
    if [ "$1" = "$file" ]; then
      return 0
    fi
  done
  return 1
}

_diff() {
  if [ -z "$1" ]; then
    git diff --color=always --cached | less -R
    return
  fi

  if [ -d "${1}" ]; then
    find "${1}" -type f -print0 | xargs -0 bat
  else
    # shellcheck disable=2086
    git diff --color=always $1 | less -R
  fi
}

_pager() {
  local files=""
  for file in $1; do
    if [ -d "$file" ]; then
      files+=$(find "$file" -type f)
    else
      files+="$file "
    fi
  done

  # remove trailing space
  files=${files%" "}
  # shellcheck disable=2086
  if [ -n "$PAGER" ] ;then
    $PAGER $files
  elif command -v bat >/dev/null 2>&1; then
    bat --paging=always $files
  else
    less $files
  fi
}

_git_i_reset() {
  # for unstage
  local file staged_files ret_fzf file_cnt selects

  while true; do
    staged_files=''
    while read -r file; do
      if ! _exists_in_stashlist "$file"; then
        staged_files+="$file "
      fi
    done < <(git status --short | awk '{if(substr($0,1,1) !~ /^[ ?]/ )print $NF}')
    [ -z "${staged_files}" ] && return

    ret_fzf=$(
      echo "$staged_files" |
        sed -e '$ s/ $//g; s/ /\n/g' |
        fzf-tmux --multi \
          --query '' \
          --exit-0 \
          --preview-window=right:80%,~6 \
          --reverse \
          --border \
          --bind alt-p:preview-up,alt-n:preview-down \
          --preview 'echo -e '\''select the file to be unstage\n'\''; git diff --cached --color=always {}'
    )
    file_cnt=$(($(wc -l <<<"$ret_fzf") - 1))
    selects=("$(tail -${file_cnt} <<<"$ret_fzf")")
    [ -z "${ret_fzf}" ] && return

    # shellcheck disable=2086
    git reset -- $ret_fzf
  done
}

git-i-staging() {
  local file changed_files header ret_fzf input file_cnt selects
  header=$(describe)

  while true; do

    changed_files=''
    while read -r file; do
      if ! _exists_in_stashlist "$file"; then
        changed_files+="$file "
      fi
    done < <(git status --short | awk '{if (substr($0,2,1) != " ") print $NF}')
    [ -z "${changed_files}" ] && return

    # shellcheck disable=2016
    ret_fzf=$(
      echo "$changed_files" |
        sed -e '$ s/ $//g; s/ /\n/g' | # --query "$query" --print-query \
        fzf-tmux -p 90% --multi \
          --exit-0 \
          --preview-window=right:80%,~4 \
          --reverse \
          --border \
          --bind alt-p:preview-up,alt-n:preview-down \
          --expect=alt-o \
          --expect=alt-r \
          --expect=alt-a \
          --expect=alt-s \
          --expect=alt-d \
          --expect=alt-D \
          --expect=alt-h \
          --expect=alt-c \
          --expect=alt-C \
          --expect=ctrl-s \
          --header="$header" \
          --preview '\
              if [ -d {} ];then\
                tree -C {} -p;\
                bat --color always $(find {} -type f);\
                exit;\
              fi;\
              if [ $(git log -n 1 -p {} | wc -l) -eq 0 ];\
                then echo -e '\''new file\n'\'' && bat {} --color always;\
                else git diff --color=always {};\
              fi'
    )

    # query=$(echo $ret_fzf | cut -d ' ' -f 1)
    input=$(head -1 <<<"$ret_fzf")
    file_cnt=$(($(wc -l <<<"$ret_fzf") - 1))
    selects="$(tail -${file_cnt} <<<"$ret_fzf" | sed -E 's/\n/ /g')"
    [ -z "${selects[*]}" ] && return

    clear
    if [ "$input" = alt-o ]; then
      # shellcheck disable=2086
      vim $selects
    elif [ "$input" = alt-r ]; then
      _git_i_reset
    elif [ "$input" = alt-a ]; then
      # shellcheck disable=2086
      git add $selects
    elif [ "$input" = ctrl-s ]; then
      stash_files+="$selects "
    elif [ "$input" = alt-d ]; then
      # shellcheck disable=2068
      _diff ${selects[@]}
    elif [ "$input" = alt-D ]; then
      _diff
    elif [ "$input" = alt-h ]; then
      # hank 単位での add
      [ -z "$GIT_EDITOR" ] && export GIT_EDITOR=vim
      # shellcheck disable=2086
      git add -p $selects
    elif [ "$input" = alt-c ]; then
      [ -z "$GIT_EDITOR" ] && export GIT_EDITOR=vim
      git commit
    elif [ "$input" = alt-C ]; then
      git commit --amend --no-edit
    elif [ "$input" = alt-s ]; then
      export GIT_PAGER='less -XRS'
      git status
    else
      _pager "$selects"
    fi
  done
}

commit_if_all_staged() {
  test "$(git status --short | awk '{if (substr($0,2,1) != " ") print $NF}' | wc -l)" -gt 0 && return
  [ -z "$GIT_EDITOR" ] && export GIT_EDITOR=vim
  git commit
}

if [[ "$1" = '--help' || "$1" = '-h' ]]; then
  describe
else
  git rev-parse || exit
  git-i-staging "$1"
  commit_if_all_staged
fi

