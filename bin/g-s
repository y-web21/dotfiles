#!/usr/bin/env bash

describe() {
  cat <<-EOS
		Staging Support Script
		alt-a: add <files>
		alt-h: add -p <files> # hunk
		alt-c: commit staged files
		alt-d: diff <files>
		alt-D: diff --cached
		alt-o: vim <files>
		alt-r: show staged files and reset files
		alt-s: show current status
		ctrl-s: stash <files>
		enter: checkout
	EOS
}

# global stash_files

_post_stash() {
  if [ -n "$stash_files" ]; then
    # shellcheck disable=2086
    git stash -u -m "stash_$(date --iso-8601='seconds')" -- ${stash_files}
  fi
}

# trap 'after_stash' {1,2,3,15}
trap '_post_stash' EXIT

_exists_in_stashlist() {
  local file
  for file in $stash_files; do
    if [ "$1" = "$file" ]; then
      return 0
    fi
  done
  return 1
}

_git_i_reset() {
  local file target ret_fzf file_cnt selects

  while true; do
    target=''
    while read -r file; do
      if ! _exists_in_stashlist "$file"; then
        target+="$file "
      fi
    done < <(git status --short | awk '{if(substr($0,1,1) !~ /^[ ?]/ )print $NF}')
    [ -z "${target}" ] && return

    ret_fzf=$(
      echo "$target" |
        sed -e '$ s/ $//g; s/ /\n/g' |
        fzf-tmux --multi \
          --query '' \
          --exit-0 \
          --preview-window=right:80%,~6 \
          --reverse \
          --border \
          --bind alt-p:preview-up,alt-n:preview-down \
          --preview 'echo -e '\''select the file to be unstage\n'\''; git diff --cached --color=always {}'
    )
    file_cnt=$(($(wc -l <<<"$ret_fzf") - 1))
    selects=("$(tail -${file_cnt} <<<"$ret_fzf")")
    [ -z "${ret_fzf}" ] && return

  # shellcheck disable=2086
    git reset -- $ret_fzf
  done
}

git-i-staging() {
  local file target ret_fzf input file_cnt selects
  # local query

  while true; do

    target=''
    while read -r file; do
      if ! _exists_in_stashlist "$file"; then
        target+="$file "
      fi
    done < <(git status --short | awk '{if (substr($0,2,1) != " ") print $NF}')
    [ -z "${target}" ] && return

    # shellcheck disable=2016
    ret_fzf=$(
      echo "$target" |
        sed -e '$ s/ $//g; s/ /\n/g' | # --query "$query" --print-query \
        fzf-tmux -p 90% --multi \
          --exit-0 \
          --preview-window=right:80%,~4 \
          --reverse \
          --border \
          --bind alt-p:preview-up,alt-n:preview-down \
          --expect=alt-o \
          --expect=alt-r \
          --expect=alt-a \
          --expect=alt-s \
          --expect=alt-d \
          --expect=alt-D \
          --expect=alt-h \
          --expect=alt-c \
          --expect=ctrl-s \
          --preview 'if [ $(git log -n 1 -p {} | wc -l) -eq 0 ]; then echo -e '\''new file\n'\'' && bat {} --color always ; else git diff --color=always {}; fi'
    )

    # query=$(echo $ret_fzf | cut -d ' ' -f 1)
    input=$(head -1 <<<"$ret_fzf")
    file_cnt=$(($(wc -l <<<"$ret_fzf") - 1))
    selects="$(tail -${file_cnt} <<<"$ret_fzf" | sed -E 's/\n/ /g')"
    [ -z "${selects[*]}" ] && return

    clear
    if [ "$input" = alt-o ]; then
      # shellcheck disable=2086
      vim $selects
    elif [ "$input" = alt-r ]; then
      _git_i_reset
    elif [ "$input" = alt-a ]; then
      # shellcheck disable=2086
      git add $selects
    elif [ "$input" = ctrl-s ]; then
      stash_files+="$selects "
    elif [ "$input" = alt-d ]; then
      # shellcheck disable=2086
      git diff --color=always $selects | less -R
    elif [ "$input" = alt-D ]; then
      git diff --color=always --cached | less -R
    elif [ "$input" = alt-h ]; then
      # hank 単位での add
      # shellcheck disable=2086
      [ -z "$GIT_EDITOR" ] && export GIT_EDITOR=vim
      git add -p $selects
    elif [ "$input" = alt-c ]; then
      [ -z "$GIT_EDITOR" ] && export GIT_EDITOR=vim
      git commit
    elif [ "$input" = alt-s ]; then
      export GIT_PAGER='less -XRS'
      git status
    else
      # shellcheck disable=2086
      git add $selects
    fi
  done
}

if [[ "$1" = '--help' || "$1" = '-h' ]]; then
  describe
else
  git-i-staging "$1"
fi
