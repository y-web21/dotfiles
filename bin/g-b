#!/usr/bin/env bash

describe() {
  cat <<-EOS
		alt-a: add branch
		alt-r: remove branch
		enter: checkout
	EOS
}

git-i-branch() {
  local query header request_cmd ret_fzf
  local key selects branch
  query="${1:-}"
  header=$(describe)
  request_cmd='git branch -a -v --color'
  while true; do
    ret_fzf="$(eval "$request_cmd" |
      tr '*' ' ' |
      sed -E 's/^ *//' |
      grep --color=never -v -E 'remotes\/[a-zA-Z0-9]*\/(main|master|dev|develop|prod)' |
      grep --color=never -v -E '(main|master)' |
      column -t -s "$(printf '\t')" |
      fzf-tmux -p 90% \
        --query="${query}" \
        --ansi \
        --multi \
        --header="$header" \
        --expect=alt-r,alt-a)"
    [ -z "${ret_fzf}" ] && return

    key=$(printf '%s' "$ret_fzf" | cut -d $'\n' -f 1)
    selects=$(printf '%s' "$ret_fzf" | cut -d $'\n' -f 2-)
    branch=$(echo $selects | awk '{print $1}') # last one selected.

    case "${key}" in
    alt-r)
      printf '%s' "$selects" | cut -d $'\n' -f 1- | while read -r line; do
        _delete-branch "$(echo "$line" | cut -d ' ' -f 1)"
      done
      ;;
    alt-a)
      query="'$(_make_new_branch)"
      continue
      ;;
    *)
      git checkout "$branch"
      ;;
    esac
    break
  done
}

_delete-branch() {
  local branch
  branch=${1}
  if [[ $branch = remotes/* ]]; then
    _delete_remote_branch "$branch"
    return
  fi
  _delete_local_branch "$branch"
}

_delete_remote_branch() {
  local remote branch
  remote=$(echo "${1}" | cut -d '/' -f 2)
  branch=$(echo "${1}" | cut -d '/' -f 3-)
  git push --delete "${remote}" "${branch}"
}

_delete_local_branch() {
  local branch
  branch=${1}
  if ! git branch -d "$branch"; then
    read -r -e -p "remove $branch failed. try to force deletion? (yN): " -i "" yn
    [[ ! $yn =~ y|Y ]] && return
    git branch -D "$branch"
  fi
}

_make_new_branch() {
  local new_branch
  new_branch="$(read -r -p 'new branch name: ' && echo "$REPLY")"
  git branch "$new_branch"
  echo "$new_branch"
  read -r -e -p 'add to remote branch now? (yN): ' -i "" yn
  [[ $yn =~ y|Y ]] && git push --set-upstream origin "$new_branch"
  return 0
}

if [[ "$1" = '--help' || "$1" = '-h' ]]; then
  describe
else
  git-i-branch "$1"
fi
