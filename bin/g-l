#!/usr/bin/env bash

script_name="$(basename $0)"

describe() {
  cat <<-EOS
		show log and pick hash
		Args:
		  arg1 = option (default --all)
		Keybinds:
		  esc: exit
		  ctrl-c: exit
		  enter: echo selected hash and store to clipboard
		Environments:
		  G_L_OPTS: git log options
		    e.g
		    export G_L_OPTS="--no-merges --since='2010/1/1' --until='4 days ago' --author=$(git config user.name) --committer=$(git config user.name)"
	EOS
}

_do_fzf() {
  cmd="$1"
  preview="$2"
  query="$3"
  eval "${cmd}" |
    fzf-tmux -p 90% \
      --query="${query:-}" \
      --expect=alt-d \
      --expect=alt-o,ctrl-o \
      --expect=alt-i \
      --expect=alt-h,alt-m \
      --bind="?:preview:git log {1} -1 --color --name-status" \
      --bind="ctrl-s:preview:git status" \
      --bind="alt-f:preview:echo {} | cut -d ' ' -f 1 | xargs -I% git log % -1 --oneline --name-status --color" \
      --bind="ctrl-r:reload(git reflog --oneline),ctrl-t:reload(eval ${cmd})" \
      --bind="F1:toggle-preview" \
      --preview-window=65%,,~6 \
      --preview "${preview}" \
      --header "$(
        printf '%-20s\t%-20s\n%-20s\t%-20s\n%-20s\t%-20s\n%-20s\t%-20s\n%-20s\t%-20s\n%-20s\t%-20s' \
          'Enter: copy hash' 'alt-d: diff' \
          'alt-o,ctrl-o: vim' 'alt-i: rebase -i' \
          'alt-h: reset --hard' 'alt-m: reset --mixed' \
          'alt-f: show name-status' 'ctrl-s: show status' \
          'F1: toggle-preview' ' ' \
          'ctrl-r: reflog' 'ctrl-t: log' \
      )"
}

_is_branch_clean() {
  test "$(git status --short | wc -l)" -eq 0
}

_is_rebsae_in_progress() {
  test -d "$(git rev-parse --show-toplevel)/.git/rebase-merge"
}

_stash_and_rebase() {
  local stash_msg stash

  if ! _is_branch_clean;then
    stash_msg="stash by script ${script_name}. fucntion ${FUNCNAME[0]}. hash ${0}"
    git stash push --include-untracked --message "${stash_msg}"
    stash="$(git stash list | grep "${stash_msg}"  | awk -F':' '{print $(1)}')"
  fi

  git rebase -i "${ghash}~"

  if [ -n "$stash" ] && ! _is_rebsae_in_progress; then
    git stash pop "$stash"
  fi
}

_git_log_fzf() {
  local fzf_ret key pick ghash
  local opts cmd preview

  opts="${1:---all} ${G_L_OPTS:-}"

  # filetr DBD
  # author alt+a

  cmd="git log ${opts} --oneline"
  preview='git show --color=always --pretty=fuller {1}'

  while true; do
    fzf_ret=$(_do_fzf "${cmd}" "$preview")
    key=$(printf '%s' "$fzf_ret" | tail +1 | head -1)
    pick=$(printf '%s' "$fzf_ret" | tail +2 | head -1)
    ghash=$(echo "$pick" | awk '{print $1}')

    [ "$key" = 'ctrl-c' ] && break
    [ "$key" = 'esc' ] && break

    case "${key}" in
    alt-c | alt-y | ctrl-y) ;;
    alt-d)
      git diff "$ghash"
      continue
      ;;
    alt-o | ctrl-o)
      # shellcheck disable=SC2046
      vim -c 'ls' $(git log "${ghash}" -1 --name-only --oneline | tail +2 | sed -z 's/\n/ /g')
      ;;
    alt-i)
      _stash_and_rebase "${ghash}"
      continue
      ;;
    alt-h)
      read -r -p 'ok? (y/N) ' && [[ $REPLY =~ y|Y ]] &&
        echo -e -n "run 'reset \e[31m--hard\e[39m', really ok? (y|N)" && read -r && [[ $REPLY =~ y|Y ]] &&
        git reset --hard "${ghash}"
      continue
      ;;
    alt-m)
      read -r -p 'ok? (y/N) ' && [[ $REPLY =~ y|Y ]] && git reset --mixed "${ghash}"
      continue
      ;;
    *)
      echo "$ghash" | clip
      echo "$ghash"
      if [ -n "$BASH_VERSION" ]; then
        :
      fi
      ;;
    esac

    break
  done
}

if [[ "$1" = '--help' || "$1" = '-h' ]]; then
  describe
else
  _git_log_fzf "$@"
fi
