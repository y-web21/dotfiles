# shellcheck disable=SC2148
#
# ShellCheck ignore list:
#  - SC2148: Can't follow non-constant source. Use a directive to specify location.

test -f ~/dotfiles/private_settings/pre.bash && source ~/dotfiles/private_settings/pre.bash

COMMON_RC=$HOME/.commonrc

if [ -e $COMMON_RC ]
then source $COMMON_RC
fi

metapack(){
  if apt-get -v >/dev/null 2>&1; then
    echo '=== apt list, apt-get install ==='
    # sudo apt update
    dpkg -l "*${1}*" | grep --color "${1}"
    # apt list "*${1}*" | grep --color "${1}"
  fi

  if yum -v >/dev/null 2>&1; then
    echo -e '\n=== yum search, yum install ==='
    yum search "${1}" | grep --color "${1}"
  fi

  if dnf -v >/dev/null 2>&1; then
    echo -e '\n=== dnf search, dnf install ==='
    dnf search "${1}" | grep --color "${1}"
  fi

  if nix --version >/dev/null 2>&1; then
    echo -e '\n=== nix-env -qa, nix-env --install ==='
    nix-env --query --available"${1}" | grep --color "${1}"
  fi

  if brew -v >/dev/null 2>&1; then
    echo -e '\n=== brew search, brew install ==='
    brew search "${1}" | grep --color "${1}"
  fi

  if scoop -v >/dev/null 2>&1; then
    echo -e '\n=== scoop search, scoop install ==='
    scoop search "${1}" | grep --color "${1}"
  fi
}


cs-bin(){
  cat <<-'EOL'
	# x byte output
	xxd -g1 cha
	od -tx1 cha
	od -tc cha
	od -tx1 -tc -An <(echo -n abcd)
	od -tx1 -tc -An <(echo ABCD)
	# file header
	xxd -l 50 bash_function.png
	xxd -l 50 asdf.jpg
	xxd -l 300 sample.wav
	od -tc -N 50 return_code.txt
	EOL
}

cs-rsync(){
  cat <<-'EOL'
	# the fllowing example, copy xml file and directories. (on ubuntu rsync)
	rsync -r --include='*/' --include='*.xml' --exclude='*' src dst

	# シンボリックリンクを実体として、.tmpと.db以外コピー の条件でテストラン
	 rsync -ahvL --include='*/' --exclude='*.db' --exclude='*.tmp' src/ dst --dry-run

	-a -rlptgoDを指定することでなるべくコピー元のファイルと同一条件でコピーする。
	-h human readable unit
	-v verbose
	--progress ファイル単位での状況表示
	-n --dry-run
	-l シンボリックリンクをシンボリックリンクのままコピー
	-L シンボリックリンクを実体としてコピー
	--max-size 転送対象のファイルサイズの上限
	-e sshのポート指定。ex. rsync -e "ssh -p 22222"
	EOL
}

# alias lanana='curl -sS https://www.lanana.org/lsbreg/providers/providers.txt | grep -vE '\''^\s'\'' | grep -v '\''^\s*$'\'' | awk '\''{print $1}'\'''
lanana() {
  # The Linux Assigned Names And Numbers Authority
  # Linux Standard Base (LSB)
  local URL LIST HZLINE
  case "$1" in
  providers)
    # LSB Provider Names - LSB Provider Name Registry
    URL=https://www.lanana.org/lsbreg/providers/providers.txt
    ;;
  packages)
    # LSB Package Names - LSB Package Name Registry
    URL=https://www.lanana.org/lsbreg/packages/packages.txt
    ;;
  init-script)
    # LSB Init Script Names - LSB Init Script Name Registry
    URL=https://www.lanana.org/lsbreg/init/init.txt
    ;;
  cron-script)
    # LSB Cron Script Names - LSB Cron Script Name Registry
    URL=https://www.lanana.org/lsbreg/packages/packages.txt
    ;;
  *)
    echo 'invalid arg error'
    return 1
    ;;
  esac

  LIST=$(curl -sS ${URL}) | grep -vE '^\s' | grep -v '^\s*$' | awk '{print $1}'
  HZLINE=$(curl -sS ${URL} | grep -nE '^-+' | cut -d':' -f1)
  curl -sS ${URL} | grep -vE '^\s' | grep -v '^\s*$' | awk "NR>${HZLINE}{print \$1}"
}

_lanana_comp() {
  local cur complist
  _get_comp_words_by_ref -n : cur
  complist="providers packages init-script cron-script"
  COMPREPLY=($(compgen -W "${complist}" -- "${cur}"))
} && complete -F _lanana_comp lanana

function git-get-short-hash {
  # shift
  # local dst=${2:-\~}
  # \$2 = destination(guest) default : ${dst}
  if [[ $# -gt 0 ]]; then
    git log --oneline | head -${1} | tail -1 | awk '{print $1}'
  else
    cat <<-EOF
		1 args required.
		\$1 = line (git log --oneline)
		EOF
  fi
}

function git-get-hash {
  if [[ $# -gt 0 ]]; then
    git log --pretty=oneline | head -${1} | tail -1 | awk '{print $1}'
  else
    cat <<-EOF
		1 args required.
		\$1 = line (git log --oneline)
		EOF
  fi
}

function git-parent-branch {
  if [[ $# -gt 1 ]]; then
    git show-branch --sha1-name $1 $2 | tail -1
  else
    cat <<-EOF
		2 args required.
		\$1 = branch
		\$2 = branch
		EOF
  fi
}

git-config-options-helpo(){
  cat <<-EOF
	git config core.xxx --local yyy

	# ignore case はPHPでは困るなぁ
	ignorecase = <default:true>

	# prevent changes to perimission 644 when push from windows
	filemode = <default:true>

	# lf に固定 (主に for windows)
  git config --global core.autocrlf input
  # それよりも false で git側に改行コード変換するコントロールを渡さない方がいいと思った。
  git config --global core.autocrlf false (linux default)

	# Win向けの改行コードをリポジトリに保持する場合
	add .gitattributes > echo '*.html diff=sjis' > .gitattributes

	EOF
}

# ============== .bashrc =================
# /etc/skel/.bashrc

if is_wsl; then
  test -r ~/.bashrc_wsl && . ~/.bashrc_wsl
elif is_linux; then
  test -r ~/.bashrc_linux && . ~/.bashrc_linux
elif is_mac; then
  :
else
  echo 'nomatch'
fi

# shellcheck disable=1090
test -r ~/.bash_aliases && . ~/.bash_aliases
# shellcheck disable=1090
test -r ~/.bashrc.local && . ~/.bashrc.local

# shellcheck disable=1090
. ~/dotfiles/modules/keybind.bash
# shellcheck disable=1090
. ~/dotfiles/functions/primary.bash

# shellcheck disable=1090
test -f ~/dotfiles/private_settings/post.bash && source ~/dotfiles/private_settings/post.bash

if is_debian_based;then
  apt moo
  # sudo apt list --upgradable
  # sudo apt install --only-upgrade
  # apt-mark hold
  # apt-mark unhold
  # APT_HOLD_LIST=$(dpkg --get-selections | grep hold)
fi

