" init all settings
set all&
" init autocmd
autocmd!

"------------------------------------
" Open & Reload .vimrc
"------------------------------------
command! Evimrc edit $MYVIMRC

augroup source-vimrc
  autocmd!
  autocmd BufWritePost *vimrc source $MYVIMRC | set foldmethod=marker
  autocmd BufWritePost *gvimrc if has('gui_running') source $MYGVIMRC
augroup END

"------------------------------------
" general
"------------------------------------
set encoding=utf-8
set fileencodings=utf-8,cp932,euc-jp,sjis
set fileformats=unix,dos,mac
set shell=/bin/bash
set mouse=a
" set modeline
set viminfo='100,f1,<500,s10,h

" don't allow editing of read only files
augroup ro-edit
  autocmd!
  autocmd BufRead * let &l:modifiable = !&readonly
augroup END

" Uncomment the following to have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"------------------------------------
" vim files
" note: xdg sample https://blog.joren.ga/vim-xdg
"------------------------------------
let s:enable_vim_files = 1
if s:enable_vim_files != 0

  if has('nvim') " Neovim has its own special location
    " nvim
    set directory=$XDG_STATE_HOME/vim/swap
    set backupdir=$XDG_STATE_HOME/vim/backup
    set undodir=$XDG_STATE_HOME/vim/undo
    set viewdir=$XDG_STATE_HOME/vim/view
    set viminfofile=$XDG_STATE_HOME/vim/viminfo

    set runtimepath^=$XDG_CONFIG_HOME/vim
    set runtimepath+=$XDG_DATA_HOME/vim
    set runtimepath+=$XDG_CONFIG_HOME/vim/after

    set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
    set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

    let g:netrw_home = $XDG_DATA_HOME."/vim"
    call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)
  else
    " vim
    if exists('*mkdir') && !isdirectory($HOME.'/.vim/')
      call mkdir($HOME.'/.vim/')
    endif

    set directory=$HOME/.vim/swap
    set backupdir=$HOME/.vim/backup
    set undodir=$HOME/.vim/undo
    set viminfofile=$HOME/.vim/viminfo

    let g:netrw_home = $HOME."/.vim"
    call mkdir($HOME."/.vim/spell", 'p', 0700)
  endif

  set swapfile
  set backup
  call mkdir(&directory, 'p', 0700)
  call mkdir(&backupdir, 'p', 0700)
  if has('persistent_undo')
    set undofile
    call mkdir(&undodir, 'p', 0700)
  endif

  else
  set noswapfile
  set nobackup
  set noundofile
  set viminfo=
endif

"------------------------------------
" plugins
" Plugin Manager: [vim-plug](https://github.com/junegunn/vim-plug)
" Command: Plug[Install|Update|Upgrade|Status...]
"------------------------------------
"ファイルタイプごとのプラグイン読み込みを有効にする
filetype plugin on

if filereadable(expand('~/.vim/autoload/plug.vim'))
  call mkdir(expand('~/.vim/plugged'), 'p', 0700)
  call plug#begin(expand('~/.vim/plugged'))
    set helplang=ja,en
    Plug 'vim-jp/vimdoc-ja'

    " git plugin
    Plug 'tpope/vim-fugitive'
    call plug#end()
endif

"------------------------------------
" builtin plugin netrw
"------------------------------------
let g:netrw_banner=1
" display file size and timestamp
let g:netrw_liststyle=1
" h=1000 H=1024(KiB style unit)
let g:netrw_sizestyle="H"
let g:netrw_timefmt="%Y/%m/%d(%a) %H:%M:%S"
" vertically preview window (p key)
let g:netrw_preview=1
" use buffer only remote directory
let g:netrw_fastbrowse=1

"------------------------------------
" input mode settings
"------------------------------------
set autoindent
set expandtab  " tab to space
set tabstop=4   " num of char to convert tab to spaces when open
set softtabstop=4   " when keyboard input
set shiftwidth=4    " autoindent spaces
set showmatch  " 対応カッコをハイライト
set ruler
set title
set list  " 不可視文字を表示する
set listchars=tab:>-,trail:.  " タブを >--- 半スペを . で表示する
set number

augroup tab_setting
  autocmd!
  "ファイルタイプに合わせたインデントを有効にする
  filetype indent on
  "sw=shiftwidth, sts=softtabstop, ts=tabstop, et=expandtabの略
  autocmd FileType c           setlocal sw=4 sts=4 ts=4 et
  autocmd FileType sh          setlocal sw=2 sts=2 ts=2 et
  autocmd FileType bash        setlocal sw=2 sts=2 ts=2 et
  autocmd FileType zsh         setlocal sw=2 sts=2 ts=2 et
  autocmd FileType python      setlocal sw=4 sts=4 ts=4 et
  autocmd FileType json        setlocal sw=2 sts=2 ts=2 et
  autocmd FileType html        setlocal sw=2 sts=2 ts=2 et
  autocmd FileType css         setlocal sw=4 sts=4 ts=4 et
  autocmd FileType scss        setlocal sw=4 sts=4 ts=4 et
  autocmd FileType sass        setlocal sw=4 sts=4 ts=4 et
  autocmd FileType javascript  setlocal sw=2 sts=2 ts=2 et
augroup END

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

"------------------------------------
" normal mode settings
"------------------------------------
set ignorecase
set smartcase " require ignorecase

"------------------------------------
" command line mode settings
"------------------------------------
set wildmenu    " tab 補完(C+i)

"------------------------------------
" appearance settings
"------------------------------------
" cursor type
if has('vim_starting')
    let &t_EI .= "\e[2 q"   " normal mode
    let &t_SI .= "\e[6 q"   " insert mode
    let &t_SR .= "\e[4 q"   " replace mode
endif

" hilight line
" カーソル行を強調表示しない
set nocursorline
" 挿入モードの時のみ、カーソル行をハイライトする
autocmd InsertEnter,InsertLeave * set cursorline!

"------------------------------------
" color theme
"------------------------------------
function UpdateColorScheme()
  if &readonly && &buftype ==# ""
    " readonly and not helpfile
    colorscheme evening
  else
    let l:cmd = printf('test -x %s', expand('%'))
    let l:_ = system(l:cmd)
    if v:shell_error != 0
      colorscheme murphy
    else
      colorscheme default
      "  colorscheme torte
    endif
  endif
endfunction
autocmd BufReadPost,BufEnter * call UpdateColorScheme()

"------------------------------------
" status line
"------------------------------------
" always display
set laststatus=2
set statusline=%3*[%{mode()}]\ %*
set statusline+=%F%m%r%h%w%=
if exists("*FugitiveConfig")
  set statusline+=\ %{fugitive#statusline()}
endif
set statusline+=\ [%{&ff}:%{&fileencoding}]
set statusline+=\ [%Y]
set statusline+=\ [%04l,%04v]
set statusline+=\ [%p%%/%L]
set statusline+=\ %{strftime(\"%Y/%m/%d\ %H:%M:%S\")}

"------------------------------------
" clipboard settings
"------------------------------------
" ビジュアルモードで選択したテキストが、クリップボードに入るようにする。
" set guioptions+=a " GUI
set clipboard+=autoselect
" 無名レジスタに入るデータを、*レジスタにも入れる。
set clipboard+=unnamed

"------------------------------------
" custom command
"------------------------------------
cnoreabbrev vsv vert sview
cnoreabbrev vsview vert sview
cnoreabbrev reload source $MYVIMRC
cnoreabbrev vt VerticalTerminal
cnoreabbrev vterm VerticalTerminal

command! -nargs=0 VerticalTerminal echo s:VerticalTerminal()
function! s:VerticalTerminal()
  :vert term
  :call feedkeys("\<C-w>r")
endfunction

command! SamplePy3 echo s:py3(expand('%'), getpos('.'))

function! s:py3(file, pos)
  let l:line = a:pos[1]
  let l:cmd = printf('tmux-send-keys /usr/bin/env python3 %s', a:file)
  return system(l:cmd)
endfunction

nnoremap py3 :<C-u>SamplePy3<Return>

"------------------------------------
" re-examination
"------------------------------------
language C  " system laguage english
syntax enable
" set norestorescreen
" scriptencoding utf-8

"------------------------------------
" finish loading vimrc if tiny or small version.
"------------------------------------
if !1 | finish | endif

"------------------------------------
" key binding memo
"------------------------------------
" " key bind list
" :help index.txt
" " user key bind
" :map
" :imap
" :nmap
" :vmap
" :verbose nmap

"------------------------------------
" enable alt modifier (linux)
"------------------------------------
" :help :set-termcap
execute "set <M-b>=\eb"
execute "set <M-f>=\ef"
execute "set <M-k>=\ek"

"------------------------------------
" Normal, Visual, Select, Operator-pendin mode key binding
"------------------------------------
noremap g<c-a> <ESC>ggvGV
noremap <Space>h ^
noremap <Space>l $

"------------------------------------
" nomal(command) mode key binding custumize
"------------------------------------
"(nmapは再帰的であるためループになる可能性があるのでnnoremap
" ソフトラップされた仮想的な行を含めて下にスクロール
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
nnoremap ; :
nnoremap : ;
nnoremap <silent> <ESC><ESC> :<C-u>nohlsearch<CR>
nnoremap ZQ <Nop>
nnoremap <Space>/ *

augroup NormalModeBreak
  autocmd!
augroup END

"" Insert line break by Enter in normal mode
autocmd  NormalModeBreak BufWinEnter *
  \  if &modifiable
  \|   nnoremap <buffer> <CR> i<CR><ESC>
  \| else
  \|   nunmap <buffer> <CR>
  \| endif

" move lines up, down  e.g 2[e = 2 lines up
nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>
" add blank line
nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>

" 保存して終了
nnoremap <C-s><C-s><C-s> :<C-u>wq<cr>

"------------------------------------
" insert mode key binding custumize
"------------------------------------
" normal への移行を楽に
inoremap <silent> jk <ESC>
" 保存して終了
inoremap <C-s><C-s> <ESC>:<C-u>wq<cr>

"------------------------------------
" command line mode key binding
"------------------------------------
cnoremap fuck q!

" emacs like
cnoremap <C-a> <Home>
cnoremap <C-b> <Left>
cnoremap <C-d> <Del>
cnoremap <C-e> <End>
cnoremap <C-f> <Right>
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>
cnoremap <C-k> <C-\>e(strpart(getcmdline(), 0, getcmdpos() - 1))<CR>
cnoremap <M-k> <C-k>
cnoremap <M-b> <S-Left>
cnoremap <M-f> <S-Right>

"------------------------------------
" visual and select mode key binding
"------------------------------------
vnoremap <C-c> :w !wl-copy<cr>  " wayland

"  augroup highlightIdegraphicSpace
"    autocmd!
"    autocmd Colorscheme * highlight IdeographicSpace term=underline ctermbg=DarkGreen guibg=DarkGreen
"    autocmd VimEnter,WinEnter * match IdeographicSpace /　/
"  augroup END  " visuble zenkaku space

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

"------------------------------------
" function
"------------------------------------
function! s:mkdir(dir)
  if !isdirectory(a:dir)
    call mkdir(a:dir, "p")
  endif
endfunction

"------------------------------------
" 分岐処理いろいろ
"------------------------------------

if has("mac")
    set shell=/bin/bash
elseif has("unix")
    set shell=/bin/bash
elseif has("win64")
  if exists('*mkdir') && !isdirectory('~/user/appfiles/vim')
    call mkdir('~/user/appfiles/vim')
  endif
  " temp files export destination
  set directory=~/user/appfiles/vim/swap
  set backupdir=~/user/appfiles/vim/backup
  if has('persistent_undo')
    set undodir=~/user/appfiles/vim/undo
    set undofile
  endif
  set viminfo+=n~/user/appfiles/vim/viminfo
  set shell=C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe\ -executionpolicy\ bypass
elseif has("win32unix")
    " Cygwin固有の設定
    set shell=/bin/bash
elseif has("win32")
    set shell=/bin/bash
elseif has("wsl")
    " wsl固有の設定 うまく動かないとの報告あり
    set shell=/bin/bash
endif


" if ( has('python') || has('python3') )
"     " python が必要な設定をここに書く
" else
"     " python がないときの設定
" endif
" if has('lua')
"     " lua が必要な設定
" else
"     " lua がないときの必要な設定
" endif

" vim version >= 8
if v:version >= 800|set breakindent|endif

" cryptmethod = blowfish2 if version >= 7.4 else zip
" if v:version >= 704 | set cm=blowfish2 | elseif | set cm=zip | endif

" if git installed
" if executable('git')
"     call dein#add("airblade/vim-gitgutter")
"     call dein#add("tpope/vim-fugitive")
" endif



" Windows Subsystem for Linux で、ヤンクでクリップボードにコピー
if system('uname -a | grep -i microsoft') != ''
  augroup myYank
    autocmd!
    autocmd TextYankPost * :call system('clip.exe', @")
  augroup END
end
