[user]
	name = y-web21
[url "https://github.com/"]
	insteadOf = git://github.com/
[url "ssh://git@github.com/"]
	insteadOf = https://github.com/
[core]
	quotepath = false
	pager = LESSCHARSET=utf-8 less -XFRS
	autoCRLF = false
	ignoreCase = false
	eol = lf
	safecrlf = true
[fetch]
	prune = true
	defaultBranch = main
[alias]
	a = add
	ah = add -p
	acm = !git add . && git commit
	acmm = !git add . && git commit -m
	b = branch
	cm = commit
	cmm = commit -m
	cma = commit --amend
	cmaf = commit --amend --no-verify
	cmam = commit --amend -m
	cmfix = commit --no-edit --amend
	cmr = reset --soft HEAD~
	c = checkout
	cat = !"f() { git cat-file -p \"${1}\":\"${2}\"; }; f"
	co = checkout
	conyou = checkout --theirs
	conme = checkout --ours
	cp = cherry-pick
	d = !"f() { a2=''; [ $# -ge 2 ] && a2=\"@~${2}\"; git diff @~${1:-0} $a2; echo @~${1:-0} $a2; }; f"
	dc = diff --cached
	f = log -p
	fu = !"export GIT_EDITOR=vim && git commit -m 'fixup'; git stash -u && git rebase -i @~2 && git stash pop"
	fua = !"export GIT_EDITOR=vim && git add . && git commit -m 'fixup' && git rebase -i @~2"
	n = now --all --stat
	s = status
	r = !"f() { git reset HEAD~${1:-1}; }; f"
	rb = rebase
	rbi = !"f() { git rebase -i HEAD~${1:-5}; }; f"
	vdiff = difftool --tool=vimdiff --no-prompt
	vmerge = mergetool -t vimdiff
	onto = "!git rebase --onto"
	vd = !"f() { vimdiff <(git show HEAD:${1}) ${1}; }; f"
	; rbx = !git rebase -i @~${1:-5} && :
	# == add, commit, push ==
	apply-gitignore = rm -r --cached .
	gistpush = !git add . && git commit --allow-empty-message -m '' && git push
	pust = !git add . && git commit -m 'test [skip ci]' && git push origin @
	tesh = !git add . && git commit -m \"$(date \"+%Y-%m-%d_%H:%M:%S\")\" && git push origin @
	# assume unchanged 変更を無視するというより、大規模リポジトリで高速化を図ることを目的としたもの。
	# 対象のファイルが変更されることを想定しておらず reset --hard や merge で変更が消える。
	# hold = update-index --assume-unchanged
	# unhold = update-index --no-assume-unchanged
	hold = update-index --skip-worktree
	unhold = update-index --no-skip-worktree
	ls-hold = !"bash -cv 'git ls-files -v | grep ^S'"
	# ls-hold = !"git ls-files -v | grep ^[a-z]"
	reset-aslo-unstage = "!git reset && git clean -df"
	ciskip = !git add . && git commit -m 'test [skip ci]' && git push origin @
	tesh = !git add . && git commit -m \"$(date \"+%Y-%m-%d_%H:%M:%S\")\" && git push origin @
	rm-from-tracking = rm --cached
	# .env とかも全部吹っ飛ぶので使用禁止
	# reset-exhard = "!f() { git reset --hard ${1:-@} && git clean -fdx; }; f"
	# == secondary ==
	stash-file = stash push --
	stash-show = show -p
	stash-detail = diff stash@{0}
	stash-co-file = ! git checkout stash@{$1} $2 && :
	stash-with-name = stash save
	stash-drop = ! git stash drop stash@{$1} && :
	sho = !git show $(git hash ${1}):${2} && :
	# reset hard & remove untracked file
	vibase = !export GIT_EDITOR=vi && git rebase -i @~${1:-10} && :
	codase = !export GIT_EDITOR=code && git rebase -i @~${1:-10} && :
	conflicts = !git ls-files -u | cut -f 2 | sort -u
	; rm-merged-branch = !git branch --merged | sed -e 's/^\\*.*//' | awk 'NF' | xargs git branch -d
	rm-merged-branch="!f(){git branch --merged | grep -vE '(main|master|dev|develop)' | xargs git branch -d"
	# == log, blame ==
	blam = !git blame $(git hash ${1}) -- ${2} && :
	hash = !git log --oneline --format="%H" | awk NR==$((${1:-1}+1)) && :
	hasha = !git log --oneline --all --format="%H" | awk NR==$((${1:-1}+1)) && :
	# 変更ファイルを表示
	l = log --name-status
	logv = log --pretty='format:%C(yellow)%h %C(green)%cd %C(cyan)[%an] %C(reset)%s %C(red)%d' --date=iso
	log-full = log --pretty=fuller
	log-author = log --author
	# file 指定可能 変更履歴の概要
	log-overview = log --oneline --stat
	blam = !git blame $(git hash ${1}) -- ${2} && :
	ref-cp = reflog | grep 'cherry-pick'
	# == util ==
	alias="!bash -c '\
		GA=$(git config -l | grep ^alias | sed s/^alias\\.// | sed s/=.*$// | sort); \
		TMP=$(mktemp); \
		for i in $(seq 1 $(expr \\( $(echo $GA | wc -w) + 4 \\) / 5 )); do\
			FIELD=''; \
			for j in $(seq ${i} 5 $(echo $GA | wc -w)); do\
				FIELD=$FIELD','$j; \
			done; \
			echo $GA | cut -d \" \" -f ${FIELD:1} >> $TMP ; \
		done; \
		cat $TMP | column -t && rm $TMP;'"
	ls-config = "!git config --system -l | sed 's/^/[system] /'; git config --global -l | sed 's/^/[global] /'; git config --local -l | sed 's/^/[local] /'; for P in $(find ~/.config -name *gitconfig*);do F=$(echo $P | awk -F'/' '{print $NF}');git config -l --file \"$P\" | sed \"s/^/[$F] /\"; done"
	recent = !git for-each-ref --sort=-committerdate --count=${1:-10} --format='Date: %(color:red)%(authordate:iso)%(color:reset)\t%(color:green)[%(authorname)]%(color:reset)\nRef: %(color:yellow)%(refname:short)%(color:reset)\nSubject: %(subject)\n' refs/heads refs/remotes
	conf-l = "!f(){ git rev-parse --is-inside-work-tree 2>/dev/null 1>&2 && ${1:-${EDITOR:-vim}} "$(git rev-parse --git-dir)/config"; }; f $*"
	conf-g = "!GIT_EDITOR="${EDITOR:-vim}"; git config --global --edit "
	# == ls ==
	ls = ls-files --directory
	ls-untracked = ls-files --others --exclude-standard
	ls-untracked-all = ls-files --others
	ls-ignored = ls-files --others --ignored --exclude-standard --directory
	# == fzf ==
	cmf = !g-commit-fixup
	acmf = !git add . && g-commit-fixup
	# == memo ==
	common-root = "!f(){ git show-branch --sha1-name $1 $2 | tail -1; }; f"
	diff-untracked-DONT-USE = git add -N . && git diff && git reset
	staged = diff --name-only --cached
	unstage = reset HEAD --
	dotgit = "!echo "$(git rev-parse --show-toplevel)/.git""
	sts = "!f() { stack=''; if [ $# -gt 0 ];then stack=stash@{$1}; fi;  git stash show -p ${stack}; }; f"
	ignore-list = "! cd -- \"${GIT_PREFIX:-.}\" && git ls-files -v ${1:-.} | sed -n -e \"s,^[a-z] \\(.*\\)$,${GIT_PREFIX:-./}\\1,p\" && git status --ignored --porcelain ${1:-.} 2>/dev/null | sed -n -e \"s/^\\(\\!\\! \\)\\(.*\\)$/\\2/p\" #"
	last = log -1 HEAD
	whoami = config user.name
	# git check-ignore
	# git check-attr
	# stamer = merge "stash@{"
	edit-conf-l = "!f(){ git rev-parse --is-inside-work-tree 2>/dev/null 1>&2 && ${1:-${EDITOR:-vim}} "$(git rev-parse --git-dir)/config"; }; f $*"
	edit-conf-g = "config --global --edit"
	edit-conf-f = "!find ~/.config -name *gitconfig* | fzf --multi --preview='bat {} --color=always' | xargs git config --edit --file "
	# == fzf ==
	fadd = "!git status --short | fzf --multi --preview='bat --color=always {2}' | cut -c 3- | xargs git add"
    # == temp ==
    lof = log --pretty=fuller --date=format:'%Y/%m/%d %H:%M:%S'
[include]
	path = ~/${XDG_CONFIG_HOME}/git/gitconfig-os
	path = ~/.config/git/gitconfig-os
	path = ~/.gitconfig-os
	path = ~/${XDG_CONFIG_HOME}/git/gitconfig-user
	path = ~/.config/git/gitconfig-user
	path = ~/.gitconfig-user
	path = ~/${XDG_CONFIG_HOME}/git/gitconfig-local
	path = ~/.config/git/gitconfig-local
	path = ~/.gitconfig-local
	path = ~/.gitconfig-proxy
[pager]
	status = less -F
[init]
	defaultBranch = main
[ghq]
	root = ~/ghq
[includeIf "gitdir/i:~/work/"]
	path = ~/.gitconfig-work
[diff "cp932"]
	textconv = iconv -f cp932 -t utf-8
[diff "sjis"]
	textcony = iconv -f sjis -t urf-8
[diff "jpg"]
	textconv = exif
[merge]
	tool = vimdiff
[mergetool "vimdiff"]
	cmd = vimdiff "$BASE" "$LOCAL" "$REMOTE" "$MERGED"
